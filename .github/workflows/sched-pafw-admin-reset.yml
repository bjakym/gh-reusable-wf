name: 'PAFW Admin Reset'

on:
  workflow_call:
    inputs:
      runner_label:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      commit_changes:
        required: true
        type: boolean
        default: false
      use_current_secret:
        required: true
        type: boolean
        default: true
      confg_folder:
        required: true
        type: string
    secrets:
      VAULT_MOUNTPOINT_PA_FW_ADMIN:
        required: true
      VAULT_PATH_PA_FW_ADMIN:
        required: true
      VAULT_KEY_PA_FW_ADMIN_PASSWORD:
        required: true

defaults:
  run:
    shell: bash

permissions: write-all

jobs:
  execute_pafw_admin_reset:
    name: 'Execute Steps'
    environment: ${{ inputs.environment_name }}
    runs-on: ${{ inputs.runner_label }}

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Get vault token from jwt
      - name: Get Vault Token
        working-directory: .github/scripts
        id: vault
        env:
          VAULT_ADDR: ${{ vars.VAULT_ADDR }}
          VAULT_NAMESPACE: ${{ vars.VAULT_LOCAL_NAMESPACE }}
          VAULT_ROLE: ${{ vars.VAULT_ROLE }}
        run: |
          chmod +x vault_token.sh
          ./vault_token.sh

      # Prpare vault path and mount point
      - name: Prepare Vault Path and Mount Point
        id: vault_path_mountpoint
        run: |
          # If VAULT_PATH_PA_FW_ADMIN contains */data in the beginning, remove it
          VAULT_PATH_PA_FW_ADMIN=$(echo "${{ secrets.VAULT_PATH_PA_FW_ADMIN }}" | sed 's/^.*\/data\///')
          echo "VAULT_PATH_PA_FW_ADMIN=${VAULT_PATH_PA_FW_ADMIN}" >> $GITHUB_OUTPUT
          # If VAULT_MOUNTPOINT_PA_FW_ADMIN contains */, remove everything after it
          VAULT_MOUNTPOINT_PA_FW_ADMIN=$(echo "${{ secrets.VAULT_MOUNTPOINT_PA_FW_ADMIN }}" | sed 's/\/.*//')
          echo "VAULT_MOUNTPOINT_PA_FW_ADMIN=${VAULT_MOUNTPOINT_PA_FW_ADMIN}" >> $GITHUB_OUTPUT

      # Run the backup script (playbook)
      - name: Run Playbook
        id: run_playbook
        env:
          VAULT_ADDR: ${{ vars.VAULT_ADDR }}
          VAULT_NAMESPACE: ${{ vars.VAULT_LOCAL_NAMESPACE }}
          VAULT_TOKEN: ${{ steps.vault.outputs.VAULT_TOKEN }}
        run: |
          python ansible-pa.py \
            -v projects/${{ inputs.environment_name }}/${{ inputs.confg_folder }} \
            -x '{
              "use_current_secret": ${{ inputs.use_current_secret }},
              "commit_changes": ${{ inputs.commit_changes }},
              "vault_engine_mount_point": "${{ steps.vault_path_mountpoint.outputs.VAULT_MOUNTPOINT_PA_FW_ADMIN }}",
              "vault_secret_path": "${{ steps.vault_path_mountpoint.outputs.VAULT_PATH_PA_FW_ADMIN }}",
              "vault_password_key": "${{ secrets.VAULT_KEY_PA_FW_ADMIN_PASSWORD }}"
            }' \
            -r apply \
            -i 1 \
            -f
